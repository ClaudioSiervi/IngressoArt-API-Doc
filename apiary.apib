FORMAT: 1A
HOST: https://stage.api.ingresso.art.br/api/v1/

# Ingresso.Art

Documentação da API Ingresso.Art

# Data Structures

## Banner (object)
+ id
+ path
+ ativo
+ evento_id
+ link
+ deleted_at
+ created_at
+ updated_at
+ evento (Evento)

## Checkin Logs (object)
+ id
+ checkin_status
+ success
+ msg
+ created_at
+ updated_at
+ checkin_id

## Checkin (object)
+ id
+ evento_id
+ lote_id
+ ingresso_id
+ confirmado
+ created_at
+ updated_at
+ evento (Evento)
+ lote (Lote)
+ ingresso (Ingresso)


## Endereço (object)
+ id
+ descricao
+ cep
+ rua
+ numero
+ complemento
+ bairro
+ estado
+ cidade
+ pais
+ user_id
+ created_at
+ updated_at
+ user (User)

## Evento (object)
+ id
+ nome
+ descricao
+ data
+ hora
+ local
+ genero
+ cidade
+ estado
+ ativo
+ user_id
+ gratuito
+ privado
+ identificador
+ hora_termino
+ data_termino
+ deleted_at
+ created_at
+ updated_at

## Imagem (object)
+ id
+ url
+ ativo
+ evento_id
+ miniatura
+ principal
+ deleted_at
+ created_at
+ updated_at
+ evento (Evento)


## Ingresso (object)
+ id
+ nome
+ documento
+ codigo
+ ativo
+ pedido_item_id
+ tipo_documento
+ deleted_at
+ created_at
+ updated_at
+ pedido_item (Pedido item)


## Log (object)
+ id
+ action
+ model
+ previous_data
+ new_data
+ user
+ ip
+ user_id
+ created_at
+ updated_at
+ user (User)


## Lote (object)
+ id
+ descricao
+ valor
+ taxa_administrativa
+ valor_total
+ ativo
+ quantidade
+ evento_id
+ deleted_at
+ created_at
+ updated_at
+ evento (Evento)


## Pagamento (object)
+ id
+ provider
+ transacao
+ data_transacao
+ status
+ pedido_id
+ ativo
+ created_at
+ updated_at
+ deleted_at
+ pedido (Pedido)


## Password Reset (object)
+ id
+ email
+ token
+ user_id
+ ativo
+ created_at
+ updated_at
+ deleted_at
+ user (User)

## Pedido item (object)
+ id
+ quantidade
+ valor_unitario
+ valor_total
+ lote_id
+ pedido_id
+ ativo
+ created_at
+ updated_at
+ deleted_at
+ pedido (Pedido)
+ lote (Lote)

## Pedido (object)
+ id
+ valor_total
+ status
+ user_id
+ ativo
+ created_at
+ updated_at
+ deleted_at
+ user (User)

## User (object)
+ id
+ nome
+ email
+ password
+ remember_token
+ tipo_documento
+ documento
+ telefone
+ banco
+ agencia
+ conta
+ api_key
+ ativo
+ admin
+ produtor
+ data_nascimento
+ facebook_id
+ facebook_picture_url
+ sexo
+ created_at
+ updated_at
+ deleted_at

# Group Website

## Banner [/banners]
### Lista todos os banners [GET]
+ Response 200 (application/json)
    + Attributes (array[Banner])

## Evento [/eventos]

### Lista todos os eventos [GET]
+ Response 200 (application/json)
    + Attributes (array[Evento])

### Busca evento por ID [GET /eventos/{id}]
+ Parameters
    + id (string)

+ Response 200 (application/json)
    + Attributes (Evento)

## Usuário [/users/{id}]
+ Parameters
    + id (string)

### Cria um usuário [POST /users]

Apenas depois de confirmado o email (rota atual /create)

+ Request
    + Attributes (User)

+ Response 201 (application/json)
    + Attributes (User)

### Busca usuário por ID [GET]
Deve retornar apenas informações do usuário logado, caso contrario erro

+ Request
    + Headers

            Content-Type: application/json
            Authorization:   Token token=1wpqVgjxLkom6PXNkDd8FAtt
        

+ Response 200 (application/json)
    + Attributes (User)

### Atualiza um usuário [PUT]
Atualiza apenas informações do usuário logado.

+ Response 200 (application/json)
    + Attributes (User)

### Login [POST /login]
+ Request

    + Headers

            Content-Type: application/json

    + Body


            {
                "email":"user@email.com",
                "password":"123123"
            }

+ Response 200 (application/json)
    + Attributes (User)

### Recupera usuário com token [GET /user/token/{token}]
+ Parameters
    + token (string)

+ Response 200 (application/json)

        {
            "nome": "Fulano de Tal",
            "email": "usuario@ingresso.art.br"
        }

### Ativa usuário [POST /ativar/{token}]
Usuário será encaminhado pelo email.

+ Parameters
    + token (string)

+ Request

    + Body

            {   "password" : {
                    "password" : "secret",
                    "password_confirm": "secret"
                }
            }

+ Response 200 (application/json)


### Reseta Senha [POST /password_reset]
+ Request

    + Body

            {   "email": "user@email.com"}

+ Response 200 (application/json)

            {   "msg" : "Email enviado" }


### Atualiza Senha [POST /password_update/{token}]
+ Request

    + Body

            {   "password" : "secret" }

+ Response 200 (application/json)
    + Attributes (User)

## Pedido [/pedidos]

### Cria um pedido [POST]
+ Response 200 (application/json)

### Lista pedidos do usuário [GET]
+ Request
    + Headers

            Content-Type: application/json
            Authorization:   Token token=1wpqVgjxLkom6PXNkDd8FAtt

+ Response 200 (application/json)
    + Attributes (array[Pedido])

### Busca pedido por ID [GET /pedidos/{id}]
+ Parameters
    + id (string)

+ Request
    + Headers

            Content-Type: application/json
            Authorization:   Token token=1wpqVgjxLkom6PXNkDd8FAtt

+ Response 200 (application/json)
    + Attributes (Pedido)

### Cria o pagamento de um pedido [POST /pedidos/{pedido_id}/pagamentos]
+ Parameters
    + pedido_id (string)

+ Response 200 (application/json)

### Busca um pagamento por ID [GET /pagamentos/{id}]
+ Parameters
    + id (string)

+ Response 200 (application/json)

### Busca um ingresso por ID [GET /ingressos/{id}]
+ Parameters
    + id (string)
+ Response 200 (application/json)

## PagSeguro [/pagseguro]

### Checkout do pedido [GET /pagseguro/pedido/{id}/checkout]
+ Parameters
    + id (string)

+ Response 200 (application/json)
    
### Notificações [POST /pagseguro/notifications]
+ Response 200 (application/json)

### Relatório transações abandonadas [GET /pagseguro/report/abandonada]
+ Response 200 (application/json)

### Relatório histórico [GET /pagseguro/report/historico]
+ Response 200 (application/json)


# Group Admin

Namespace /admin


## Banner [/admin/banners/{id}]
+ Parameters
    + id (string)

### Lista todos os banners [GET /admin/banners]
+ Response 200 (application/json)

### Cria um banner [POST /admin/banners]
+ Response 200 (application/json)

### Buscar banner por ID [GET]
+ Response 200 (application/json)

### Atualiza banner [PUT]
+ Response 200 (application/json)

### Deleta banner [DELETE]
+ Response 200 (application/json)




## Eventos [/admin/eventos/{id}]
+ Parameters
    + id (string)

### Lista todos os eventos [GET /admin/eventos]
+ Response 200 (application/json)

### Cria um evento [POST /admin/eventos]
+ Response 200 (application/json)

### Buscar evento por ID [GET]
+ Response 200 (application/json)

### Atualiza evento [PUT]
+ Response 200 (application/json)

### Deleta evento [DELETE]
+ Response 200 (application/json)

### Lista imagens de um evento [GET /admin/eventos/{id}/imagens]
+ Parameters
    + id (string)
+ Response 200 (application/json)

### Cria uma imagem para um eventos [POST /admin/eventos/{id}/imagens]
+ Parameters
    + id (string)
+ Response 200 (application/json)

### Lista lotes de um evento [GET /admin/eventos/{id}/lotes]
+ Parameters
    + id (string)
+ Response 200 (application/json)

### Cria um lote para um eventos [POST /admin/eventos/{id}/lotes]
+ Parameters
    + id (string)
+ Response 200 (application/json)


## Imagens [/admin/imagens/{id}]
+ Parameters
    + id (string)

### Buscar imagem por ID [GET]
+ Response 200 (application/json)

### Atualiza imagem [PUT]
+ Response 200 (application/json)

### Deleta imagem [DELETE]
+ Response 200 (application/json)


## Lotes [/admin/lotes/{id}]
+ Parameters
    + id (string)

### Buscar lote por ID [GET]
+ Response 200 (application/json)

### Atualiza lote [PUT]
+ Response 200 (application/json)

### Deleta lote [DELETE]
+ Response 200 (application/json)

### Lista todos os itens em pedidos por lote [GET /admin/lotes/{id}/pedido_itens]
+ Parameters
    + id (string)
+ Response 200 (application/json)

## Pedidos [/admin/pedidos/{id}]
+ Parameters
    + id (string)

### Listar pedidos [GET /admin/pedidos]
+ Response 200 (application/json)

### Buscar pedido por ID [GET]
+ Response 200 (application/json)

### Atualiza pedido [PUT]
+ Response 200 (application/json)

### Buscar pagamento de pedido [GET /admin/pedidos/{id}/pagamentos]
+ Parameters
    + id (string)
+ Response 200 (application/json)

## Pagamentos [/admin/pagamentos/{id}]
+ Parameters
    + id (string)

### Listar pagamentos [GET /admin/pagamentos]
+ Response 200 (application/json)

### Buscar pagamento por ID [GET]
+ Response 200 (application/json)

### Atualiza pagamento [PUT]
+ Response 200 (application/json)


## Ingressos [/admin/ingressos/{id}]
+ Parameters
    + id (string)

### Buscar ingresso por ID [GET]
+ Response 200 (application/json)

### Atualiza ingresso [PUT]
+ Response 200 (application/json)

### Deleta ingresso [DELETE]
+ Response 200 (application/json)

## Users [/admin/users/{id}]
+ Parameters
    + id (string)

### Lista todos os usuários [GET /admin/users]
+ Response 200 (application/json)

### Buscar usuário por ID [GET]
+ Response 200 (application/json)

### Atualiza usuário [PUT]
+ Response 200 (application/json)

### Deleta usuário [DELETE]
+ Response 200 (application/json)

### Lista eventos de um usuário produtor [GET /admin/users/{id}/eventos]
+ Parameters
    + id (string)
+ Response 200 (application/json)

### Lista pedidos de usuário [GET /admin/users/{id}/pedidos]
+ Parameters
    + id (string)
+ Response 200 (application/json)

## Logs [/admin/logs]

### Listas logs [GET]
+ Response 200 (application/json)

### Buscar log por ID [GET /admin/logs/{id}]
+ Parameters
    + id (string)

+ Response 200 (application/json)

## Check-ins [/admin/checkins/{id}]
+ Parameters
    + id (string)

### Buscar check-in de um ingresso [GET /admin/ingressos/{id}/checkins]
+ Parameters
    + id (string)
+ Response 200 (application/json)

### Buscar check-in por ID [GET]
+ Response 200 (application/json)

### Cria check-in para um ingresso [POST /admin/ingressos/{id}/checkins]
+ Parameters
    + id (string)
+ Response 200 (application/json)

### Atualiza check-in [PUT]
+ Response 200 (application/json)

### Deleta check-in [DELETE]
+ Response 200 (application/json)

### Busca logs de um check-in [GET /admin/checkins/{id}/checkin_logs]
+ Parameters
    + id (string)

+ Response 200 (application/json)

### Lista todos logs de check-ins [GET /admin/checkin_logs]
+ Response 200 (application/json)

### Buscar logs de check-ins por ID [GET /admin/checkin_logs/{id} ]
+ Parameters
    + id (string)

+ Response 200 (application/json)

# Group Produtor

Namespace /produtor

## Produtor [/produtor]

# Group Aplicativo

Namespace /aplicativo

## Aplicativo [/aplicativo]